import os
import glob

from influxdb_client import InfluxDBClient
from datetime import datetime, timezone, timedelta

from urllib3.exceptions import LocationValueError, NewConnectionError
from influxdb_client.rest import ApiException

def connection_test(url, token, org_id, bucket):
    '''
    status codes:
    0 --> No host specified
    1 --> Succesful
    2 --> OrganizationID incorrectly configured
    3 --> Bucket incorrectly configured
    4 --> OrgID & Bucket incorrectly configured
    '''
    client = InfluxDBClient(url=url,
                            token=token)
    try:
        organizations = client.organizations_api().find_organizations()
        buckets = client.buckets_api().find_buckets()
    except ApiException:
        status = 0
        message = 'Connection to host not authorized.\n\nCheck token permissions or protocol.'
        return (status, message)
    except LocationValueError:
        status = 0
        message = 'Couldn\'t establish connection to host.\n\nCheck InfluxDB URL.'
        return (status, message)
    except NewConnectionError:
        status = 0
        message = 'Couldn\'t establish connection to host.\n\nCheck InfluxDB URL or network connection.'
        return (status, message)
    bucket_names = []
    for b in buckets.buckets:
        bucket_names.append(b.name)
    org_names = []
    org_ids = []
    for o in organizations:
        org_names.append(o.name)
        org_ids.append(o.id)
    bucket_ok = True if bucket in bucket_names else False
    if org_id in org_names or org_id in org_ids:
        org_ok = True 
    else:
        org_ok = False
    if bucket_ok and org_ok:
        status = 1
        message = 'Successful'
    elif bucket_ok == True and org_ok == False:
        status = 2
        message = f'Organization not found!\n\nAvailable organizations:\n\tOrgID: {org_ids}\n\tOrgName: {org_names}'
    elif bucket_ok == False and org_ok == True:
        status = 3
        message = f'Bucket not found!\n\nAvailable Buckets:\n\t{bucket_names}'
    else:
        status = 4
        message = f'Organization & bucket not found!\n\nAvailable organizations:\n\tOrgID: {org_ids}\n\tOrgName: {org_names}\n\nAvailable buckets:\n\t{bucket_names}'
    return (status, message)

def schedule_task():
    ''''''
    a = 1 # ceb219edc6b94917

def init_db(URL, TOKEN, BUCKET, ORG):
    client = InfluxDBClient(url=URL, token=TOKEN, bucket=BUCKET, org=ORG)
    print(f"Connection established.")
    return client

def get_latest_log():
    """
    retrieves the latest log file generated by Faros
    """
    os.chdir(f'C:/Users/{os.getlogin()}/AppData/Roaming/Afreet/Products/Faros/BeaconLogs')
    today = datetime.now().date().strftime("%Y-%m-%d").replace('-','')
    file_names = glob.glob('*.log')
    file_dates = [int(i.replace('-', '').replace('.log','')) for i in file_names]
    file_dict = dict(zip(file_dates, file_names))
    latest_date = max(file_dict.keys())
    latest_file = file_dict[latest_date]
    if latest_date != today:
        print('Warning! Latest file not from today.')
    return latest_file

def ingest(file):
    date = datetime.now().replace(tzinfo=timezone.utc)
    latitude, longitude = 0.0, 0.0
    points = []
    with open(file, 'r') as f:
        lines = f.readlines()
        for l in lines:
            if l.startswith(';'):
                parts = [s.strip() for s in l[1:].split('\t')]
                for p in parts:
                    try:
                        segs = p.split('=')
                        k, v = segs[0], segs[-1]
                        if k.startswith('DATE'):
                            date = datetime.strptime(v, '%Y-%m-%d').replace(tzinfo=timezone.utc)
                            print(f'Set date as {date}')
                        elif p.startswith('LAT'):
                            latitude = int(v)
                            print(f'Set latitude as {latitude}')
                        elif p.startswith('LON'):
                            longitude = int(v)
                            print(f'Set longitude as {longitude}')
                    except Exception as ex:
                        print(ex)
                continue
            parts = l.split('\t')
            try:
                [time, mhz, call, snr, db, evidence, delay] = parts
                tt = datetime.strptime(time, '%H:%M:%S')
                time_point = date + timedelta(hours=tt.hour, minutes=tt.minute, seconds=tt.second)
                points.append({
                    "timestamp": time_point,
                    "mhz": int(mhz),
                    "call": call.strip(),
                    "snr": float(snr),
                    "qsb": int(db),
                    "evidence": float(evidence),
                    "valid": float(evidence) >= 1.0,
                    "delay": int(delay),
                    "lat": latitude,
                    "lon": longitude
                })
            except Exception as ex:
                print(ex)
    return points

#   *****   MAIN   *****
if __name__ == "__main__":
    a = 1
